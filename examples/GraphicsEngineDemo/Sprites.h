// Sprites.h

#ifndef _SPRITES_h
#define _SPRITES_h

#include <stdint.h>

#if defined(ARDUINO_ARCH_AVR)
#include <avr/pgmspace.h>
#endif

namespace SpriteSource
{
	namespace Arrow
	{
		static constexpr uint8_t Mask[]
#if defined(ARDUINO_ARCH_AVR)
			PROGMEM
#endif 
		{
			0b00011000,
			0b00011000,
			0b00111100,
			0b01111110,
			0b01111110,
			0b11111111,
			0b00011000,
			0b00011000,
			0b00011000,
			0b00011000,
			0b00011000,
			0b00011000
		};

		static constexpr uint8_t Width = 8;
		static constexpr uint8_t Height = sizeof(Mask);
	}

	namespace RainDrop
	{
		static constexpr uint8_t Mask[]
#if defined(ARDUINO_ARCH_AVR)
			PROGMEM
#endif 
		{
			0b00110000,
			0b00110000,
			0b00110000,
			0b01111000,
			0b01111000,
			0b01111000,
			0b11111100,
			0b11111100,
			0b11111100,
			0b01111000,
			0b01111000,
		};

		static constexpr uint8_t Width = 6;
		static constexpr uint8_t Height = sizeof(Mask);
	}

	namespace Pyramid
	{
		static constexpr uint8_t Mask[]
#if defined(ARDUINO_ARCH_AVR)
			PROGMEM
#endif 
		{
			0b00000000,0b00001110,
			0b00000000,0b00011111,
			0b00000000,0b00011111,
			0b00000000,0b00001110,
			0b00000001,0b00000000,
			0b00000011,0b10000000,
			0b00000110,0b11000000,
			0b00001100,0b11100000,
			0b00011000,0b11110000,
			0b00110000,0b11111000,
			0b01100000,0b11111100,
			0b11111111,0b11111110,
			0b00000000,0b00000000,
			0b00000000,0b00000000,
			0b00000000,0b00000000,
			0b00000000,0b00000000
		};

		static constexpr uint8_t Width = 16;
		static constexpr uint8_t Height = sizeof(Mask) / sizeof(uint16_t);
	}

	namespace Heart
	{
		static constexpr uint8_t Mask[]
#if defined(ARDUINO_ARCH_AVR)
			PROGMEM
#endif 
		{
			0b00111000, 0b00011100,
			0b01111110, 0b01111110,
			0b11111111, 0b11111111,
			0b11111111, 0b11111111,
			0b11111111, 0b11111111,
			0b01111111, 0b11111110,
			0b00111111, 0b11111100,
			0b00011111, 0b11111000,
			0b00001111, 0b11110000,
			0b00000111, 0b11100000,
			0b00000011, 0b11000000,
			0b00000001, 0b10000000
		};

		static constexpr uint8_t Width = 16;
		static constexpr uint8_t Height = sizeof(Mask) / sizeof(uint16_t);
	}

	namespace Explosion
	{
		static constexpr uint8_t Mask[]
#if defined(ARDUINO_ARCH_AVR)
			PROGMEM
#endif 
		{
			0b00000000, 0b00000000,
			0b00000000, 0b00000000,
			0b00000011, 0b10000000,
			0b00000011, 0b10000000,
			0b00000011, 0b10000000,
			0b00000000, 0b00000000,
			0b00000000, 0b00000000
		};

		static constexpr uint8_t Width = 16;
		static constexpr uint8_t Height = sizeof(Mask) / sizeof(uint16_t);

		static constexpr uint8_t Mask2[sizeof(Mask)]
#if defined(ARDUINO_ARCH_AVR)
			PROGMEM
#endif 
		{
			0b00000000, 0b00000000,
			0b00000001, 0b10000000,
			0b00000011, 0b10000000,
			0b00000011, 0b11000000,
			0b00000111, 0b10000000,
			0b00000000, 0b10000000,
			0b00000000, 0b00000000
		};

		static constexpr uint8_t Mask3[sizeof(Mask)]
#if defined(ARDUINO_ARCH_AVR)
			PROGMEM
#endif 
		{
			0b00000001, 0b10000000,
			0b00000011, 0b10000000,
			0b00000110, 0b01000000,
			0b00000110, 0b00100000,
			0b00001010, 0b01000000,
			0b00001001, 0b01000000,
			0b00000000, 0b10000000
		};

		static constexpr uint8_t Mask4[sizeof(Mask)]
#if defined(ARDUINO_ARCH_AVR)
			PROGMEM
#endif 
		{
			0b00000100, 0b10000000,
			0b00100000, 0b00100000,
			0b00000000, 0b00000000,
			0b00010000, 0b00001000,
			0b00100001, 0b00010000,
			0b00000000, 0b00000000,
			0b00110001, 0b01100000
		};

		static constexpr uint8_t Mask5[sizeof(Mask)]
#if defined(ARDUINO_ARCH_AVR)
			PROGMEM
#endif 
		{
			0b10000000, 0b00010000,
			0b00000000, 0b00000000,
			0b00000000, 0b01000000,
			0b10000000, 0b00000001,
			0b00000000, 0b00000000,
			0b00000000, 0b00000010,
			0b00000000, 0b00010000
		};
	}

	namespace Doge
	{
		static constexpr uint32_t Bitmap[] PROGMEM
#if defined(ARDUINO_ARCH_AVR)
			PROGMEM
#endif 
		{
			0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00894f09, 0x006b3b00, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x006b3b00, 0x00894f09, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040200, 0x00e17e00, 0x00e17c00, 0x004a2c07, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00050200, 0x00623a09, 0x00e17c00, 0x00e17e00, 0x00050300, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00723f00, 0x00fe8d00, 0x00fe8d00, 0x00e17c00, 0x00603600, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00723f00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00713e00, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x003f270b, 0x00e17c00, 0x007f3037, 0x007f3037, 0x00ff8a00, 0x00e17c00, 0x00945914, 0x00643d0d, 0x00000000, 0x00010101, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00010101, 0x00000000, 0x00643d0d, 0x00995d14, 0x00e17c00, 0x00ff8a00, 0x00eaeaea, 0x00eaeaea, 0x00e17c00, 0x003f270b, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x007f3037, 0x007f3037, 0x00ff8a00, 0x00fe8d00, 0x00fa8a00, 0x009f5900, 0x00000000, 0x00050505, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040404, 0x00000000, 0x009f5900, 0x00fe8d00, 0x00fe8d00, 0x00ff8a00, 0x00eaeaea, 0x00eaeaea, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x007f3037, 0x007f3037, 0x007f3037, 0x007f3037, 0x00fa8a00, 0x00dd7a00, 0x009e5700, 0x003a2305, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0041290b, 0x009f5900, 0x00e17c00, 0x00fe8d00, 0x00eaeaea, 0x00eaeaea, 0x00eaeaea, 0x00eaeaea, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x007f3037, 0x007f3037, 0x007f3037, 0x007f3037, 0x00fa8a00, 0x00fa8a00, 0x00fa8a00, 0x00563510, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00eaeaea, 0x00eaeaea, 0x00eaeaea, 0x00eaeaea, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x007f3037, 0x007f3037, 0x007f3037, 0x007f3037, 0x00fa8a00, 0x00fe8f00, 0x00010101, 0x00513516, 0x009e5700, 0x009e5700, 0x009e5700, 0x009e5700, 0x009e5700, 0x009e5700, 0x009e5700, 0x009e5700, 0x009e5700, 0x009e5700, 0x009e5700, 0x009e5700, 0x00513516, 0x00010101, 0x00fe8f00, 0x00fe8d00, 0x00eaeaea, 0x00eaeaea, 0x00eaeaea, 0x00eaeaea, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x007f3037, 0x007f3037, 0x007f3037, 0x007f3037, 0x00fa8a00, 0x00fe8f00, 0x00010101, 0x005e3d1c, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x005e3d1c, 0x00010101, 0x00fe8f00, 0x00fe8d00, 0x00eaeaea, 0x00eaeaea, 0x00eaeaea, 0x00eaeaea, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8f00, 0x00fe8d00, 0x00fa8a00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fa8a00, 0x00cdc2b0, 0x00cdc2b0, 0x00cdc2b0, 0x00cdc2b0, 0x00cdc2b0, 0x00ff8a00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00ff8a00, 0x00dfd8cf, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00dfd8cf, 0x00ff8a00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fa8a00, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ff8a00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00d7bb99, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ff8a00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00d6bb9a, 0x00d6bb9a, 0x00d6bb9a, 0x00ddd6cd, 0x00ffffff, 0x00ff8a00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00d7bb99, 0x00ffffff, 0x00ffffff, 0x00d6bb9a, 0x00d6bb9a, 0x00d6bb9a, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00cdc0b0, 0x00ffffff, 0x00ff8a00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00d7bb99, 0x00ffffff, 0x00ffffff, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8f00, 0x00010101, 0x00010101, 0x00010101, 0x0066431c, 0x00fe8d00, 0x00fe8d00, 0x00ff8a00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00ff8a00, 0x00fe8d00, 0x00fe8d00, 0x0066431c, 0x00010101, 0x00010101, 0x00010101, 0x00fe8f00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00563510, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8f00, 0x00010101, 0x00010101, 0x00010101, 0x0066431c, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00ff8a00, 0x00ff8a00, 0x00ff8a00, 0x00ff8a00, 0x00ff8a00, 0x00ff8a00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x0066431c, 0x00010101, 0x00010101, 0x00010101, 0x00fe8f00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00563510, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x005c3200, 0x00e17c00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8f00, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00b66c13, 0x00fe8d00, 0x00ffffff, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00ffffff, 0x00fe8d00, 0x00b66c13, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00fe8f00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00e17c00, 0x005e3400, 0x00000000, 0x00000000,
			0x00000000, 0x00110a03, 0x00e17c00, 0x00fa8a00, 0x00f38800, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8f00, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00ae6500, 0x00f38800, 0x00ffffff, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00ffffff, 0x00f38800, 0x00ae6500, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00fe8f00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00f38800, 0x00fa8a00, 0x00e17c00, 0x00110a03, 0x00000000,
			0x009e5700, 0x00e17c00, 0x00fe8d00, 0x00f3daa8, 0x00fefefe, 0x00fa8a00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fa8a00, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00f2f2f2, 0x00ececec, 0x00fa8a00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fe8d00, 0x00fa8a00, 0x00fefefe, 0x00f3daa8, 0x00fe8d00, 0x00e17c00, 0x009e5700,
			0x00fe8d00, 0x00fe9312, 0x00f6a140, 0x00f5e1b4, 0x00fefefe, 0x00f6a140, 0x00f6a140, 0x00f6a140, 0x00f6a140, 0x00f6a140, 0x00f6a140, 0x00f2f2f2, 0x00f5f5f5, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00e3e3e3, 0x00e3e3e3, 0x00e3e3e3, 0x00e3e3e3, 0x00e3e3e3, 0x00e3e3e3, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fdfdfd, 0x00fdfdfd, 0x00f6a140, 0x00f6a140, 0x00f6a140, 0x00f6a140, 0x00f6a140, 0x00f6a140, 0x00fefefe, 0x00f5e1b4, 0x00f6a140, 0x00fe9312, 0x00fe8d00,
			0x00fe8f00, 0x00f6b260, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00f6b260, 0x00fe8f00,
			0x00fe8f00, 0x00f6b260, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00ffffff, 0x002c2c2c, 0x007d7d7d, 0x00fefefe, 0x00f5f5f5, 0x00fefefe, 0x00ededed, 0x00efefef, 0x00010101, 0x00010101, 0x00efefef, 0x00eeeeee, 0x00efefef, 0x00fefefe, 0x00fefefe, 0x007d7d7d, 0x002c2c2c, 0x00ffffff, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00f6b260, 0x00fe8f00,
			0x00fe8f00, 0x00f6b260, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00ffffff, 0x00010101, 0x00717171, 0x00fefefe, 0x00f2f2f2, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00010101, 0x00010101, 0x00fefefe, 0x00ffffff, 0x00ededed, 0x00fefefe, 0x00fefefe, 0x00717171, 0x00010101, 0x00ffffff, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00f6b260, 0x00fe8f00,
			0x00fe8f00, 0x00f6b260, 0x00fcfcfc, 0x00f7f7f7, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fcfcfc, 0x00fcfcfc, 0x00ffffff, 0x00cacaca, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00cacaca, 0x00ffffff, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00efefef, 0x00f6ab55, 0x00fe8f00,
			0x00fe8f00, 0x00f6b260, 0x00fefefe, 0x00f7f7f7, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00cacaca, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00010101, 0x00cacaca, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00ededed, 0x00f6ab55, 0x00fe8f00,
			0x00000000, 0x00653f12, 0x00fe8d00, 0x00f3daa8, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00efefef, 0x00fefefe, 0x00ffffff, 0x00ffffff, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00efefef, 0x00f1cf9b, 0x00fe8d00, 0x00653f12, 0x00000000,
			0x00000000, 0x00653f12, 0x00fe8f00, 0x00f3daa8, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00ededed, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00ededed, 0x00f1cf9b, 0x00fe8f00, 0x00653f12, 0x00000000,
			0x00000000, 0x00653f12, 0x00fe8f00, 0x00f3daa8, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00eeeeee, 0x00efefef, 0x00fefefe, 0x00fefefe, 0x00efefef, 0x00eeeeee, 0x00fefefe, 0x00f3daa8, 0x00fe8f00, 0x00653f12, 0x00000000,
			0x00000000, 0x00351e00, 0x00d57b0f, 0x00f3daa8, 0x00fffff3, 0x00fffff3, 0x00fffff3, 0x00ffffff, 0x00ffffff, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fe7faa, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00ececec, 0x00ececec, 0x00fefefe, 0x00ffffff, 0x00f3f0e7, 0x00f3f0e7, 0x00fffff3, 0x00f3daa8, 0x00d87d0f, 0x003a2000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x0035210a, 0x00d37600, 0x00fe8f00, 0x00fe8f00, 0x00ffffff, 0x00fcfcfc, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00ffffff, 0x00fe8f00, 0x00fe8f00, 0x00d27600, 0x0037220a, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x000e0e0e, 0x00000000, 0x003c260a, 0x00fe8f00, 0x00fe8f00, 0x00f5e3b5, 0x00f5e3b5, 0x00f5e3b5, 0x00f5e3b5, 0x00f5e3b5, 0x00f5e3b5, 0x00f5e3b5, 0x00f3f0e7, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00f3f0e7, 0x00f5e3b5, 0x00f5e3b5, 0x00f5e3b5, 0x00f5e3b5, 0x00f5e3b5, 0x00f5e3b5, 0x00f5e3b5, 0x00fe8f00, 0x00fe8f00, 0x003d260a, 0x00000000, 0x00111111, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00fe9312, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00f7dfbc, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00fefefe, 0x00f7dfbc, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe9312, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00653f12, 0x00fe8f00, 0x00ed8e03, 0x00ed8e03, 0x00ed8e03, 0x00ed8e03, 0x00ed8e03, 0x00ed8e03, 0x00ed8e03, 0x00ed8e03, 0x00ed8e03, 0x00ed8e03, 0x00fe8f00, 0x00653f12, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
			0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0033210e, 0x00d67800, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00fe8f00, 0x00d77900, 0x0037240f, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
		};

		static constexpr uint8_t Width = 38;
		static constexpr uint8_t Height = (sizeof(Bitmap) / Width) / sizeof(uint32_t);
	}
}

namespace DemoSprites
{
	struct HeartSprite : public FlashBitMaskSprite<SpriteSource::Heart::Width, SpriteSource::Heart::Height>
	{
		HeartSprite() : FlashBitMaskSprite<SpriteSource::Heart::Width, SpriteSource::Heart::Height>(SpriteSource::Heart::Mask)
		{}
	};

	struct ExplosionSprite : public FlashBitMaskSprite<SpriteSource::Explosion::Width, SpriteSource::Explosion::Height>
	{
		ExplosionSprite() : FlashBitMaskSprite<SpriteSource::Explosion::Width, SpriteSource::Explosion::Height>(SpriteSource::Explosion::Mask)
		{}
	};

	struct ArrowSprite : public FlashBitMaskSprite<SpriteSource::Arrow::Width, SpriteSource::Arrow::Height>
	{
		ArrowSprite() : FlashBitMaskSprite<SpriteSource::Arrow::Width, SpriteSource::Arrow::Height>(SpriteSource::Arrow::Mask)
		{}
	};

	struct PyramidSprite : public FlashBitMaskSprite<SpriteSource::Pyramid::Width, SpriteSource::Pyramid::Height>
	{
		PyramidSprite() : FlashBitMaskSprite<SpriteSource::Pyramid::Width, SpriteSource::Pyramid::Height>(SpriteSource::Pyramid::Mask)
		{}
	};

	struct RainDropSprite : public FlashBitMaskSprite<SpriteSource::RainDrop::Width, SpriteSource::RainDrop::Height>
	{
		RainDropSprite() : FlashBitMaskSprite<SpriteSource::RainDrop::Width, SpriteSource::RainDrop::Height>(SpriteSource::RainDrop::Mask)
		{}
	};

	struct DogeSprite : public FlashBitmapSprite<SpriteSource::Doge::Width, SpriteSource::Doge::Height>
	{
		DogeSprite() : FlashBitmapSprite<SpriteSource::Doge::Width, SpriteSource::Doge::Height>(SpriteSource::Doge::Bitmap)
		{}
	};
}
#endif

